# Загальна частина

## 1.1. Постановка задачі

Метою даної курсової роботи є дослідження та практична реалізація класичних криптографічних алгоритмів перестановки, а саме шифру «Магічний квадрат» та квадрату Полібія. Ці алгоритми представляють собою фундаментальні методи криптографії, які демонструють принципи перестановки символів та заміщення букв відповідно.

Основними завданнями роботи є:

Теоретичне дослідження принципів роботи обраних криптографічних алгоритмів, включаючи вивчення їх історичного розвитку та математичних основ. Важливо розуміти, що шифр «Магічний квадрат» базується на принципі перестановки символів повідомлення згідно з певною матрицею, де кожен елемент має унікальне числове значення. Квадрат Полібія, у свою чергу, є методом заміщення, який кодує кожну букву алфавіту парою координат у квадратній таблиці.

Аналіз переваг та недоліків кожного з алгоритмів з точки зору криптографічної стійкості є наступним важливим завданням. Необхідно оцінити рівень захисту, який забезпечують ці методи, та визначити їх уразливості до різних типів криптоаналітичних атак.

Практична реалізація обох алгоритмів у програмному середовищі дозволить продемонструвати їх функціонування та провести порівняльний аналіз ефективності. Це включає розробку програмного коду для шифрування та дешифрування повідомлень.

Проведення тестування розроблених програм на різних типах вхідних даних забезпечить перевірку коректності реалізації та виявлення можливих помилок у логіці алгоритмів.

Створення зручного користувацького інтерфейсу для взаємодії з реалізованими алгоритмами підвищить практичну цінність розробленого програмного продукту.

## 1.2. Дослідження і аналіз об'єкту програмування

Об'єктом дослідження є два фундаментальні криптографічні алгоритми, кожен з яких представляє різний підхід до забезпечення конфіденційності інформації.

### Шифр «Магічний квадрат»

Шифр «Магічний квадрат» належить до класу перестановочних шифрів та базується на використанні магічного квадрата як ключа для перестановки символів повідомлення. Магічний квадрат являє собою квадратну матрицю розміром n×n, заповнену числами від 1 до n², де сума чисел у кожному рядку, стовпці та діагоналі є однаковою.

Принцип роботи алгоритму полягає у наступному. Спочатку повідомлення записується в таблицю згідно з порядком чисел у магічному квадраті. Потім символи зчитуються в іншому порядку, що й створює зашифроване повідомлення. Ключем шифрування служить сам магічний квадрат та спосіб зчитування символів.

Історично магічні квадрати використовувались у різних культурах для містичних та математичних цілей. У криптографії вони знайшли застосування завдяки своїй здатності створювати складні перестановки, які важко відновити без знання ключа.

Криптографічна стійкість даного методу залежить від розміру магічного квадрата та способу його заповнення. Більші квадрати забезпечують більшу кількість можливих перестановок, що ускладнює криптоаналіз. Однак цей шифр є вразливим до частотного аналізу, оскільки він не змінює частоту появи символів у тексті.

### Квадрат Полібія

Квадрат Полібія є одним з найдавніших відомих методів шифрування та належить до класу моноалфавітних шифрів заміщення. Цей метод був винайдений давньогрецьким істориком Полібієм у II столітті до нашої ери.

Алгоритм використовує квадратну таблицю розміром 5×5 або 6×6, у якій розміщені букви алфавіту. Кожна буква кодується парою чисел, що відповідають номеру рядка та стовпця, в яких вона розташована. Наприклад, у стандартному латинському варіанті буква A може бути закодована як (1,1), якщо вона знаходиться в першому рядку та першому стовпці.

Основною перевагою квадрата Полібія є його простота та можливість передачі закодованих повідомлень різними способами, включаючи візуальні сигнали та звукові коди. Це робило його особливо корисним для військових цілей у давнину.

Криптографічна стійкість квадрата Полібія є відносно низькою з сучасної точки зору, оскільки він залишається моноалфавітним шифром. Це означає, що кожна буква завжди кодується однаково, що робить його вразливим до частотного аналізу. Проте його можна посилити шляхом використання ключових слів для заповнення квадрата або комбінування з іншими криптографічними методами.

### Порівняльний аналіз

Обидва алгоритми представляють класичні підходи до криптографії, але мають принципово різні механізми роботи. Шифр «Магічний квадрат» змінює порядок символів, зберігаючи їх оригінальний вигляд, тоді як квадрат Полібія замінює кожен символ числовою парою.

З точки зору складності реалізації обидва алгоритми є відносно простими, що робить їх відмінними об'єктами для навчальних цілей. Однак їх криптографічна стійкість не відповідає сучасним стандартам безпеки, що обмежує їх практичне застосування в реальних системах захисту інформації.

## 1.3. Використані програмні засоби

Для реалізації та дослідження обраних криптографічних алгоритмів було обрано комплекс сучасних програмних засобів, які забезпечують ефективну розробку та тестування програмного коду.

### Середовище розробки

Основним середовищем розробки обрано Visual Studio Code, який є сучасним, безкоштовним та потужним редактором коду з підтримкою широкого спектру мов програмування. Цей вибір обумовлений наступними факторами: наявність інтелектуального автодоповнення коду, що прискорює процес розробки та зменшує кількість помилок; вбудовані засоби для відлагодження програм, які дозволяють ефективно виявляти та виправляти помилки в коді; підтримка системи контролю версій Git, що забезпечує можливість відстеження змін у коді та співпраці з іншими розробниками; велика кількість розширень для різних мов програмування та фреймворків.

### Мова програмування

Для реалізації алгоритмів обрано мову програмування C++ стандарту C++17 або новішого. Цей вибір обґрунтований наступними перевагами C++ у контексті криптографічних застосувань: висока швидкість виконання програм завдяки компілюванню в машинний код, що особливо важливо для криптографічних операцій; ефективне управління пам'яттю, що дозволяє оптимізувати використання ресурсів при роботі з великими обсягами даних; багата стандартна бібліотека STL (Standard Template Library), яка надає контейнери vector, array, map для ефективної роботи з матрицями та таблицями; строга типізація, що зменшує ймовірність помилок під час розробки криптографічних алгоритмів; можливість низькорівневого програмування для оптимізації критичних ділянок коду.

### Додаткові бібліотеки

Для розширення функціональності програми використовуються наступні C++ бібліотеки та компоненти. Стандартна бібліотека STL забезпечує ефективну роботу з контейнерами vector для створення двовимірних масивів та матриць, що особливо важливо для реалізації шифру «Магічний квадрат». Заголовок <iostream> використовується для введення-виведення даних, <string> для роботи з рядками, <algorithm> для алгоритмів сортування та пошуку. Для створення графічного користувацького інтерфейсу може використовуватись бібліотека Qt або FLTK, які забезпечують кросплатформенність та сучасний вигляд інтерфейсу. Заголовок <regex> допомагає в обробці та фільтрації текстових даних за допомогою регулярних виразів.

### Засоби тестування

Для забезпечення якості програмного коду використовується фреймворк Google Test (gtest), який є стандартом для модульного тестування C++ програм. Цей фреймворк дозволяє створювати автоматизовані тести для перевірки коректності роботи реалізованих алгоритмів та забезпечує детальні звіти про результати тестування.

### Документування коду

Для створення документації до програмного коду використовуються стандарти Doxygen, який є де-факто стандартом для документування C++ проектів. Коментарі у коді створюються згідно з найкращими практиками C++ розробки та стандартами Google C++ Style Guide.

## 1.4. Вимоги до апаратного та програмного забезпечення

Для успішної розробки, тестування та експлуатації програмного продукту, що реалізує обрані криптографічні алгоритми, необхідно забезпечити відповідність певним мінімальним вимогам до апаратного та програмного забезпечення.

### Апаратні вимоги

Мінімальні вимоги до апаратного забезпечення є досить помірними, оскільки реалізовані алгоритми не потребують значних обчислювальних ресурсів. Процесор повинен мати тактову частоту не менше 1 ГГц, при цому підтримуються як Intel, так і AMD архітектури. Рекомендується використання двоядерного процесора для більш комфортної роботи із середовищем розробки.

Оперативна пам'ять повинна становити не менше 4 ГБ для комфортної роботи операційної системи, компілятора C++ та середовища розробки. Рекомендується 8 ГБ або більше для одночасної роботи декількох програм та компіляції великих проектів.

Вільне місце на жорсткому диску має становити не менше 2 ГБ для встановлення компілятора C++, середовища розробки, необхідних бібліотек та зберігання файлів проекту. Рекомендується мати додатково 3-5 ГБ вільного місця для тимчасових файлів компіляції та комфортної роботи операційної системи.

Монітор з роздільною здатністю не менше 1024×768 пікселів забезпечить адекватне відображення графічного інтерфейсу програми. Рекомендується роздільна здатність 1920×1080 або вища для більш комфортної роботи з кодом.

### Програмні вимоги

Операційна система може бути будь-якою з наступних: Windows 10 або новіша, macOS 10.14 або новіша, Linux з ядром версії 4.0 або новішою. Компілятор C++ є обов'язковою вимогою - підтримуються GCC 7.0+, Clang 6.0+, або Microsoft Visual C++ 2017+, оскільки код використовує функції стандарту C++17.

Система збірки проектів CMake версії 3.10 або новішої рекомендується для кросплатформенної збірки та управління залежностями проекту. Альтернативно можна використовувати Make на Unix-системах або MSBuild на Windows.

Для розробки рекомендується використання Visual Studio Code з наступними розширеннями: C/C++ extension pack для підтримки мови C++, CMake Tools для роботи з системою збірки, GitLens для роботи з системою контролю версій. Альтернативно можна використовувати повнофункціональні IDE як Visual Studio Community, Code::Blocks або Qt Creator.

### Вимоги до безпеки

Оскільки програма працює з криптографічними алгоритмами, рекомендується дотримання базових принципів інформаційної безпеки. Антивірусне програмне забезпечення повинно бути встановлене та регулярно оновлюватись для захисту системи від шкідливого програмного забезпечення.

Файрвол операційної системи або третьої сторони має бути налаштований для блокування несанкціонованого доступу до системи. Регулярне оновлення операційної системи та встановленого програмного забезпечення забезпечить захист від відомих уразливостей.

### Додаткові рекомендації

Для підвищення продуктивності розробки рекомендується використання SSD накопичувача замість традиційного жорсткого диску. Наявність стабільного підключення до інтернету дозволить швидко завантажувати необхідні бібліотеки та отримувати оновлення.

Резервне копіювання файлів проекту на зовнішній носій або в хмарне сховище забезпечить збереження роботи у випадку технічних проблем з основним комп'ютером.