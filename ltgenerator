<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minecraft Bedrock Loot-Table Editor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-gap: 20px;
            min-height: 850px;
        }
        .header {
            grid-column: 1 / 3;
        }
        .panel {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
        }
        .panel-title {
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 15px;
            font-size: 16px;
            font-weight: bold;
        }
        .file-list {
            height: 500px;
            overflow-y: auto;
            border: 1px solid #ddd;
            margin-bottom: 10px;
        }
        .file-item {
            padding: 8px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }
        .file-item:hover {
            background-color: #f0f0f0;
        }
        .file-item.selected {
            background-color: #e0e7ff;
        }
        .button-container {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .button {
            padding: 8px 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .button:hover {
            background-color: #45a049;
        }
        .button-secondary {
            background-color: #2196F3;
        }
        .button-secondary:hover {
            background-color: #0b7dda;
        }
        .input-group {
            margin-bottom: 15px;
        }
        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .input-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .structures-list {
            height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            margin-top: 15px;
        }
        .structure-item {
            padding: 8px;
        }
        .footer {
            grid-column: 1 / 3;
            text-align: center;
            margin-top: 20px;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: black;
        }
        pre {
            background-color: #f8f8f8;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Minecraft Bedrock Loot-Table Editor</h1>
            <div class="input-group">
                <label for="folder-path">Folder Path:</label>
                <div style="display: flex; gap: 10px;">
                    <input type="text" id="folder-path" readonly>
                    <button class="button" id="select-folder">Select Folder</button>
                </div>
            </div>
        </div>
        
        <div class="panel">
            <h2 class="panel-title">Loot Table Files</h2>
            <div class="file-list" id="file-list">
                <!-- Files will be populated here -->
            </div>
            <div class="button-container">
                <button class="button button-secondary" id="select-all">Select All</button>
                <button class="button button-secondary" id="deselect-all">Deselect All</button>
            </div>
        </div>
        
        <div class="panel">
            <h2 class="panel-title">New Item Configuration</h2>
            <div class="input-group">
                <label for="item-id">Item ID:</label>
                <input type="text" id="item-id" placeholder="e.g. minecraft:diamond_sword">
            </div>
            <div class="input-group">
                <label for="weight">Weight (1-100):</label>
                <input type="number" id="weight" value="1" min="1" max="100">
            </div>
            <div class="input-group">
                <label for="rolls">Number of Rolls:</label>
                <input type="number" id="rolls" value="1" min="1">
            </div>
            <div class="input-group">
                <label for="enchant-level">Enchantment Level:</label>
                <input type="number" id="enchant-level" min="0">
            </div>
            
            <h3 style="margin-top: 20px;">Available Structures:</h3>
            <div class="structures-list" id="structures-list">
                <!-- Structures will be populated here -->
            </div>
        </div>
        
        <div class="footer">
            <div class="button-container" style="justify-content: center;">
                <button class="button button-secondary" id="preview-changes">Preview Changes</button>
                <button class="button" id="apply-changes">Apply to All</button>
            </div>
        </div>
    </div>
    
    <div id="preview-modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Preview Changes</h2>
            <div id="preview-content"></div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            class LootTableEditor {
                constructor() {
                    // Initialize variables
                    this.selectedFolder = '';
                    this.files = [];
                    this.selectedFiles = [];
                    
                    // Initialize lore mappings with current UTC time
                    const now = new Date();
                    const timestamp = now.toISOString().replace('T', ' ').substr(0, 19);
                    
                    this.loreMappings = {
                        "ancient_city": `§7Found by vertX-dev §8- §klt{${timestamp}}`,
                        "desert_pyramid": `§eDesert Discovery by vertX-dev §8- §klt{${timestamp}}`,
                        "jungle_temple": `§aJungle Secret by vertX-dev §8- §klt{${timestamp}}`,
                        "stronghold": `§dStronghold Relic by vertX-dev §8- §klt{${timestamp}}`,
                        "woodland_mansion": `§2Mansion Mystery by vertX-dev §8- §klt{${timestamp}}`,
                        "bastion_remnant": `§6Bastion Treasure by vertX-dev §8- §klt{${timestamp}}`,
                        "nether_fortress": `§cNether Secret by vertX-dev §8- §klt{${timestamp}}`,
                        "end_city": `§5End Discovery by vertX-dev §8- §klt{${timestamp}}`,
                        "ruined_portal": `§3Portal Mystery by vertX-dev §8- §klt{${timestamp}}`,
                        "underwater_ruin": `§bOcean Relic by vertX-dev §8- §klt{${timestamp}}`
                    };
                    
                    // Initialize UI elements
                    this.folderPathInput = document.getElementById('folder-path');
                    this.fileList = document.getElementById('file-list');
                    this.structuresList = document.getElementById('structures-list');
                    this.previewModal = document.getElementById('preview-modal');
                    this.previewContent = document.getElementById('preview-content');
                    
                    // Initialize form elements
                    this.itemIdInput = document.getElementById('item-id');
                    this.weightInput = document.getElementById('weight');
                    this.rollsInput = document.getElementById('rolls');
                    this.enchantLevelInput = document.getElementById('enchant-level');
                    
                    // Set up event listeners
                    this.setupEventListeners();
                    
                    // Populate structures list
                    this.populateStructuresList();
                }
                
                setupEventListeners() {
                    // Folder selection
                    document.getElementById('select-folder').addEventListener('click', () => this.selectFolder());
                    
                    // File selection buttons
                    document.getElementById('select-all').addEventListener('click', () => this.selectAll());
                    document.getElementById('deselect-all').addEventListener('click', () => this.deselectAll());
                    
                    // Action buttons
                    document.getElementById('preview-changes').addEventListener('click', () => this.previewChanges());
                    document.getElementById('apply-changes').addEventListener('click', () => this.applyChanges());
                    
                    // Modal close button
                    document.querySelector('.close').addEventListener('click', () => {
                        this.previewModal.style.display = 'none';
                    });
                    
                    // Close modal when clicking outside
                    window.addEventListener('click', (event) => {
                        if (event.target === this.previewModal) {
                            this.previewModal.style.display = 'none';
                        }
                    });
                }
                
                populateStructuresList() {
                    const structuresList = document.getElementById('structures-list');
                    structuresList.innerHTML = '';
                    
                    // Sort structures alphabetically
                    const structures = Object.keys(this.loreMappings).sort();
                    
                    // Add each structure to the list
                    structures.forEach(structure => {
                        const item = document.createElement('div');
                        item.className = 'structure-item';
                        item.textContent = `• ${structure}`;
                        structuresList.appendChild(item);
                    });
                }
                
                selectFolder() {
                    // In a real app, this would open a file dialog
                    // For this demo, we'll simulate it with a prompt
                    const folder = prompt("Enter folder path:", this.selectedFolder || "C:storage/emulated/0/A Ultimate combat overhaul/assets/bedrock-samples-main/behavior_pack/loot_tables/chests");
                    if (folder) {
                        this.selectedFolder = folder;
                        this.folderPathInput.value = folder;
                        this.loadFiles();
                    }
                }
                
                loadFiles() {
                    // In a real app, this would scan the folder for JSON files
                    // For this demo, we'll simulate with some example files
                    const exampleFiles = [
                        'ancient_city.json',
                        'desert_pyramid.json',
                        'jungle_temple.json',
                        'stronghold.json',
                        'woodland_mansion.json',
                        'bastion_remnant.json',
                        'nether_fortress.json',
                        'end_city.json',
                        'ruined_portal.json',
                        'underwater_ruin.json'
                    ];
                    
                    this.files = exampleFiles;
                    this.selectedFiles = [];
                    
                    // Populate file list
                    this.fileList.innerHTML = '';
                    
                    this.files.sort().forEach(file => {
                        const nameWithoutExt = file.replace('.json', '');
                        
                        const item = document.createElement('div');
                        item.className = 'file-item';
                        item.textContent = nameWithoutExt;
                        item.dataset.file = file;
                        
                        // Add click event for selection
                        item.addEventListener('click', () => {
                            item.classList.toggle('selected');
                            
                            if (item.classList.contains('selected')) {
                                this.selectedFiles.push(file);
                            } else {
                                const index = this.selectedFiles.indexOf(file);
                                if (index !== -1) {
                                    this.selectedFiles.splice(index, 1);
                                }
                            }
                        });
                        
                        this.fileList.appendChild(item);
                    });
                }
                
                selectAll() {
                    const items = this.fileList.querySelectorAll('.file-item');
                    items.forEach(item => {
                        item.classList.add('selected');
                        const file = item.dataset.file;
                        if (!this.selectedFiles.includes(file)) {
                            this.selectedFiles.push(file);
                        }
                    });
                }
                
                deselectAll() {
                    const items = this.fileList.querySelectorAll('.file-item');
                    items.forEach(item => {
                        item.classList.remove('selected');
                    });
                    this.selectedFiles = [];
                }
                
                validateInput() {
                    if (!this.itemIdInput.value) {
                        alert("Item ID is required!");
                        return false;
                    }
                    
                    const weight = parseInt(this.weightInput.value);
                    if (isNaN(weight) || weight < 1 || weight > 100) {
                        alert("Weight must be a number between 1 and 100!");
                        return false;
                    }
                    
                    const rolls = parseInt(this.rollsInput.value);
                    if (isNaN(rolls) || rolls < 1) {
                        alert("Number of rolls must be a positive integer!");
                        return false;
                    }
                    
                    const level = this.enchantLevelInput.value ? parseInt(this.enchantLevelInput.value) : 0;
                    if (isNaN(level) || level < 0) {
                        alert("Enchantment level must be a positive integer!");
                        return false;
                    }
                    
                    return true;
                }
                
                generateNewEntry(fileName) {
                    const baseName = fileName.replace('.json', '');
                    
                    const entry = {
                        "type": "item",
                        "name": this.itemIdInput.value,
                        "weight": parseInt(this.weightInput.value)
                    };
                    
                    // Add enchantments if specified
                    if (this.enchantLevelInput.value) {
                        entry.functions = [{
                            "function": "enchant_with_levels",
                            "levels": parseInt(this.enchantLevelInput.value)
                        }];
                    }
                    
                    // Add lore if mapping exists
                    if (this.loreMappings[baseName]) {
                        if (!entry.functions) {
                            entry.functions = [];
                        }
                        entry.functions.push({
                            "function": "set_lore",
                            "lore": [this.loreMappings[baseName]]
                        });
                    }
                    
                    return entry;
                }
                
                previewChanges() {
                    if (!this.validateInput()) {
                        return;
                    }
                    
                    if (this.selectedFiles.length === 0) {
                        alert("No files selected!");
                        return;
                    }
                    
                    // Clear previous content
                    this.previewContent.innerHTML = '';
                    
                    // Generate preview content
                    this.selectedFiles.forEach(fileName => {
                        const container = document.createElement('div');
                        container.innerHTML = `<h3>=== ${fileName} ===</h3>`;
                        
                        const poolSettings = document.createElement('div');
                        poolSettings.innerHTML = `<h4>Pool Settings:</h4>
                            <p>Rolls: ${this.rollsInput.value}</p>`;
                        container.appendChild(poolSettings);
                        
                        const newEntry = document.createElement('div');
                        newEntry.innerHTML = `<h4>New Entry:</h4>`;
                        
                        const pre = document.createElement('pre');
                        pre.textContent = JSON.stringify(this.generateNewEntry(fileName), null, 2);
                        newEntry.appendChild(pre);
                        
                        container.appendChild(newEntry);
                        this.previewContent.appendChild(container);
                    });
                    
                    // Show the modal
                    this.previewModal.style.display = 'block';
                }
                
                applyChanges() {
                    if (!this.validateInput()) {
                        return;
                    }
                    
                    if (this.selectedFiles.length === 0) {
                        alert("No files selected!");
                        return;
                    }
                    
                    // In a real app, this would modify the actual files
                    // For this demo, we'll just show an alert
                    const modifiedCount = this.selectedFiles.length;
                    alert(`Changes applied to ${modifiedCount} file(s)!
                    
In a real implementation, this would:
1. Create backups of the selected files
2. Add the new item entry to each loot table
3. Update the rolls count to ${this.rollsInput.value}`);
                }
                
                // In a real app, we would have methods for file operations
                createBackup(filePath) {
                    // Would create a backup of the file
                    console.log(`Creating backup of: ${filePath}`);
                }
                
                modifyLootTable(filePath) {
                    // Would modify the loot table file
                    console.log(`Modifying loot table: ${filePath}`);
                }
            }
            
            // Initialize the application
            const app = new LootTableEditor();
        });
    </script>
</body>
</html>